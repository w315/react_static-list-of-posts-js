{"version":3,"sources":["components/CommentInfo/CommentInfo.jsx","components/CommentList/CommentList.jsx","components/UserInfo/UserInfo.jsx","components/PostInfo/PostInfo.jsx","components/PostList/PostList.jsx","App.jsx","index.jsx"],"names":["CommentInfo","_ref","comment","name","email","body","_jsxs","className","children","_jsx","href","concat","CommentList","comments","length","map","id","_Fragment","UserInfo","_ref$user","user","username","PostInfo","post","title","PostList","posts","postsFromServer","_objectSpread","userId","usersFromServer","find","postId","commentsFromServer","filter","App","ReactDOM","render","document","getElementById"],"mappings":"0z8IAAaA,EAAc,SAAHC,GAAqB,IAAfC,EAAOD,EAAPC,QACpBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,KAErB,OACEC,eAAA,MAAIC,UAAU,cAAaC,SAAA,CACzBF,eAAA,OAAKC,UAAU,qBAAoBC,SAAA,CACjCC,cAAA,UAAQF,UAAU,oBAAmBC,SAAEL,IAEtC,OAEDM,cAAA,KACEF,UAAU,qBACVG,KAAI,UAAAC,OAAYP,GAAQI,SAEvBJ,OAILK,cAAA,OAAKF,UAAU,oBAAmBC,SAC/BH,QChBIO,G,MAAc,SAAHX,GAAA,IAAMY,EAAQZ,EAARY,SAAQ,OACf,IAApBA,EAASC,OACRL,cAAA,MAAIF,UAAU,cAAaC,SACxBK,EAASE,KAAI,SAAAb,GAAO,OACnBO,cAACT,EAAW,CAACE,QAASA,GAAcA,EAAQc,SAIhDV,eAAAW,WAAA,CAAAT,SAAA,CACEC,cAAA,SAEAA,cAAA,KAAG,UAAQ,oBAAmBD,SAAC,yBCdxBU,EAAW,SAAHjB,GAA6C,IAADkB,EAAAlB,EAAtCmB,KAAQjB,EAAIgB,EAAJhB,KAAMC,EAAKe,EAALf,MAAOiB,EAAQF,EAARE,SAG9C,MAF2B,KAAVjB,EAGfK,cAAA,QAAMF,UAAU,WAAUC,SACvBL,GAASkB,GAAY,4BAIxBZ,cAAA,KAAGF,UAAU,WAAWG,KAAI,UAAAC,OAAYP,GAAQI,SAC7CL,GAASkB,GAAY,6BCLfC,G,MAAW,SAAHrB,GAAkB,IAAZsB,EAAItB,EAAJsB,KACjBC,EAAgCD,EAAhCC,MAAOJ,EAAyBG,EAAzBH,KAAMf,EAAmBkB,EAAnBlB,KAAMQ,EAAaU,EAAbV,SAE3B,OACEP,eAAA,MAAIC,UAAU,WAAUC,SAAA,CACtBF,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC/BC,cAAA,MAAIF,UAAU,kBAAiBC,SAAEgB,IAEjClB,eAAA,KAAAE,SAAA,CACG,eACAY,GAAQX,cAACS,EAAQ,CAACE,KAAMA,UAI7BX,cAAA,KAAGF,UAAU,iBAAgBC,SAC1BH,IAGHI,cAACG,EAAW,CAACC,SAAUA,SCrBhBY,EAAW,SAAHxB,GAAA,IAAMyB,EAAKzB,EAALyB,MAAK,OAC9BjB,cAAA,MAAIF,UAAU,WAAUC,SACrBkB,EAAMX,KAAI,SAAAQ,GAAI,OACbd,cAACa,EAAQ,CAACC,KAAMA,GAAWA,EAAKP,UCU/B,IAAMU,EAAQC,EAAgBZ,KAAI,SAAAQ,GAAI,OAAAK,wBAAA,GACxCL,GAAI,IACPH,MAVmBS,EAUDN,EAAKM,OAThBC,EAAgBC,MAAK,SAAAX,GAAI,OAAIA,EAAKJ,KAAOa,MAUhDhB,UAP2BmB,EAOGT,EAAKP,GAN5BiB,EAAmBC,QAAO,SAAAhC,GAAO,OAAIA,EAAQ8B,SAAWA,QADjE,IAA6BA,EAJRH,KAcRM,EAAM,WAAH,OACd7B,eAAA,WAASC,UAAU,MAAKC,SAAA,CACtBC,cAAA,MAAIF,UAAU,aAAYC,SAAC,yBAE3BC,cAACgB,EAAQ,CAACC,MAAOA,QCrBrBU,IAASC,OACP5B,cAAC0B,EAAG,IACJG,SAASC,eAAe,W","file":"static/js/main.10c06734.chunk.js","sourcesContent":["export const CommentInfo = ({ comment }) => {\n  const { name, email, body } = comment;\n\n  return (\n    <li className=\"CommentInfo\">\n      <div className=\"CommentInfo__title\">\n        <strong className=\"CommentInfo__name\">{name}</strong>\n\n        {' by '}\n\n        <a\n          className=\"CommentInfo__email\"\n          href={`mailto:${email}`}\n        >\n          {email}\n        </a>\n      </div>\n\n      <div className=\"CommentInfo__body\">\n        {body}\n      </div>\n    </li>\n  );\n};\n","import { CommentInfo } from '../CommentInfo';\nimport './CommentList.scss';\n\nexport const CommentList = ({ comments }) => (\n  (comments.length !== 0) ? (\n    <ul className=\"CommentList\">\n      {comments.map(comment => (\n        <CommentInfo comment={comment} key={comment.id} />\n      ))}\n    </ul>\n  ) : (\n    <>\n      <hr />\n\n      <b data-cy=\"NoCommentsMessage\">No comments yet</b>\n    </>\n  )\n);\n","export const UserInfo = ({ user: { name, email, username } }) => {\n  const newLocal = email === '';\n\n  return newLocal ? (\n    <span className=\"UserInfo\">\n      {name || (username || 'The user has not signed')}\n    </span>\n\n  ) : (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name || (username || 'The user has not signed')}\n    </a>\n  );\n};\n","// import PropTypes from 'prop-types';\nimport { CommentList } from '../CommentList';\nimport { UserInfo } from '../UserInfo';\nimport './PostInfo.scss';\n\nexport const PostInfo = ({ post }) => {\n  const { title, user, body, comments } = post;\n\n  return (\n    <li className=\"PostInfo\">\n      <div className=\"PostInfo__header\">\n        <h3 className=\"PostInfo__title\">{title}</h3>\n\n        <p>\n          {' Posted by  '}\n          {user && <UserInfo user={user} />}\n        </p>\n      </div>\n\n      <p className=\"PostInfo__body\">\n        {body}\n      </p>\n\n      <CommentList comments={comments} />\n    </li>\n  );\n};\n\n// PostInfo.propTypes = {\n//   post: PropTypes.shape({\n//     title: PropTypes.string.isRequired,\n//     user: PropTypes.object,\n//     body: PropTypes.string.isRequired,\n//     comments: PropTypes.arrayOf(PropTypes.object),\n//   }).isRequired,\n// };\n","import { PostInfo } from '../PostInfo';\n\nexport const PostList = ({ posts }) => (\n  <ul className=\"PostList\">\n    {posts.map(post => (\n      <PostInfo post={post} key={post.id} />\n    ))}\n  </ul>\n);\n","import './App.scss';\n\nimport postsFromServer from './api/posts.json';\nimport commentsFromServer from './api/comments.json';\nimport usersFromServer from './api/users.json';\nimport { PostList } from './components/PostList';\n\nfunction getUserById(userId) {\n  return usersFromServer.find(user => user.id === userId);\n}\n\nfunction getCommentsByPostId(postId) {\n  return commentsFromServer.filter(comment => comment.postId === postId);\n}\n\nexport const posts = postsFromServer.map(post => ({\n  ...post,\n  user: getUserById(post.userId),\n  comments: getCommentsByPostId(post.id),\n}));\n\nexport const App = () => (\n  <section className=\"App\">\n    <h1 className=\"App__title\">Static list of posts</h1>\n\n    <PostList posts={posts} />\n  </section>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}